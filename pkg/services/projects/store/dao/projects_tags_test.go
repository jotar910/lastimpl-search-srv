// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dao

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testProjectsTags(t *testing.T) {
	t.Parallel()

	query := ProjectsTags()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testProjectsTagsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsTag{}
	if err = randomize.Struct(seed, o, projectsTagDBTypes, true, projectsTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProjectsTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProjectsTagsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsTag{}
	if err = randomize.Struct(seed, o, projectsTagDBTypes, true, projectsTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ProjectsTags().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProjectsTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProjectsTagsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsTag{}
	if err = randomize.Struct(seed, o, projectsTagDBTypes, true, projectsTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProjectsTagSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProjectsTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProjectsTagsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsTag{}
	if err = randomize.Struct(seed, o, projectsTagDBTypes, true, projectsTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ProjectsTagExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ProjectsTag exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ProjectsTagExists to return true, but got false.")
	}
}

func testProjectsTagsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsTag{}
	if err = randomize.Struct(seed, o, projectsTagDBTypes, true, projectsTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	projectsTagFound, err := FindProjectsTag(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if projectsTagFound == nil {
		t.Error("want a record, got nil")
	}
}

func testProjectsTagsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsTag{}
	if err = randomize.Struct(seed, o, projectsTagDBTypes, true, projectsTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ProjectsTags().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testProjectsTagsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsTag{}
	if err = randomize.Struct(seed, o, projectsTagDBTypes, true, projectsTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ProjectsTags().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testProjectsTagsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	projectsTagOne := &ProjectsTag{}
	projectsTagTwo := &ProjectsTag{}
	if err = randomize.Struct(seed, projectsTagOne, projectsTagDBTypes, false, projectsTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsTag struct: %s", err)
	}
	if err = randomize.Struct(seed, projectsTagTwo, projectsTagDBTypes, false, projectsTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = projectsTagOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = projectsTagTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProjectsTags().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testProjectsTagsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	projectsTagOne := &ProjectsTag{}
	projectsTagTwo := &ProjectsTag{}
	if err = randomize.Struct(seed, projectsTagOne, projectsTagDBTypes, false, projectsTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsTag struct: %s", err)
	}
	if err = randomize.Struct(seed, projectsTagTwo, projectsTagDBTypes, false, projectsTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = projectsTagOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = projectsTagTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProjectsTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func projectsTagBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsTag) error {
	*o = ProjectsTag{}
	return nil
}

func projectsTagAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsTag) error {
	*o = ProjectsTag{}
	return nil
}

func projectsTagAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsTag) error {
	*o = ProjectsTag{}
	return nil
}

func projectsTagBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsTag) error {
	*o = ProjectsTag{}
	return nil
}

func projectsTagAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsTag) error {
	*o = ProjectsTag{}
	return nil
}

func projectsTagBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsTag) error {
	*o = ProjectsTag{}
	return nil
}

func projectsTagAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsTag) error {
	*o = ProjectsTag{}
	return nil
}

func projectsTagBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsTag) error {
	*o = ProjectsTag{}
	return nil
}

func projectsTagAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsTag) error {
	*o = ProjectsTag{}
	return nil
}

func testProjectsTagsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ProjectsTag{}
	o := &ProjectsTag{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, projectsTagDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ProjectsTag object: %s", err)
	}

	AddProjectsTagHook(boil.BeforeInsertHook, projectsTagBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	projectsTagBeforeInsertHooks = []ProjectsTagHook{}

	AddProjectsTagHook(boil.AfterInsertHook, projectsTagAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	projectsTagAfterInsertHooks = []ProjectsTagHook{}

	AddProjectsTagHook(boil.AfterSelectHook, projectsTagAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	projectsTagAfterSelectHooks = []ProjectsTagHook{}

	AddProjectsTagHook(boil.BeforeUpdateHook, projectsTagBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	projectsTagBeforeUpdateHooks = []ProjectsTagHook{}

	AddProjectsTagHook(boil.AfterUpdateHook, projectsTagAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	projectsTagAfterUpdateHooks = []ProjectsTagHook{}

	AddProjectsTagHook(boil.BeforeDeleteHook, projectsTagBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	projectsTagBeforeDeleteHooks = []ProjectsTagHook{}

	AddProjectsTagHook(boil.AfterDeleteHook, projectsTagAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	projectsTagAfterDeleteHooks = []ProjectsTagHook{}

	AddProjectsTagHook(boil.BeforeUpsertHook, projectsTagBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	projectsTagBeforeUpsertHooks = []ProjectsTagHook{}

	AddProjectsTagHook(boil.AfterUpsertHook, projectsTagAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	projectsTagAfterUpsertHooks = []ProjectsTagHook{}
}

func testProjectsTagsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsTag{}
	if err = randomize.Struct(seed, o, projectsTagDBTypes, true, projectsTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProjectsTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProjectsTagsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsTag{}
	if err = randomize.Struct(seed, o, projectsTagDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ProjectsTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(projectsTagColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ProjectsTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProjectsTagToOneProjectUsingProject(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ProjectsTag
	var foreign Project

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, projectsTagDBTypes, false, projectsTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsTag struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, projectDBTypes, false, projectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Project struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ProjectID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Project().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ProjectsTagSlice{&local}
	if err = local.L.LoadProject(ctx, tx, false, (*[]*ProjectsTag)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Project == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Project = nil
	if err = local.L.LoadProject(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Project == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testProjectsTagToOneTagUsingTag(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ProjectsTag
	var foreign Tag

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, projectsTagDBTypes, false, projectsTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsTag struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, tagDBTypes, false, tagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TagID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Tag().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ProjectsTagSlice{&local}
	if err = local.L.LoadTag(ctx, tx, false, (*[]*ProjectsTag)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Tag == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Tag = nil
	if err = local.L.LoadTag(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Tag == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testProjectsTagToOneSetOpProjectUsingProject(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProjectsTag
	var b, c Project

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, projectsTagDBTypes, false, strmangle.SetComplement(projectsTagPrimaryKeyColumns, projectsTagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, projectDBTypes, false, strmangle.SetComplement(projectPrimaryKeyColumns, projectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, projectDBTypes, false, strmangle.SetComplement(projectPrimaryKeyColumns, projectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Project{&b, &c} {
		err = a.SetProject(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Project != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProjectsTags[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ProjectID != x.ID {
			t.Error("foreign key was wrong value", a.ProjectID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProjectID))
		reflect.Indirect(reflect.ValueOf(&a.ProjectID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ProjectID != x.ID {
			t.Error("foreign key was wrong value", a.ProjectID, x.ID)
		}
	}
}
func testProjectsTagToOneSetOpTagUsingTag(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProjectsTag
	var b, c Tag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, projectsTagDBTypes, false, strmangle.SetComplement(projectsTagPrimaryKeyColumns, projectsTagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tagDBTypes, false, strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tagDBTypes, false, strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Tag{&b, &c} {
		err = a.SetTag(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Tag != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProjectsTags[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TagID != x.ID {
			t.Error("foreign key was wrong value", a.TagID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TagID))
		reflect.Indirect(reflect.ValueOf(&a.TagID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TagID != x.ID {
			t.Error("foreign key was wrong value", a.TagID, x.ID)
		}
	}
}

func testProjectsTagsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsTag{}
	if err = randomize.Struct(seed, o, projectsTagDBTypes, true, projectsTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProjectsTagsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsTag{}
	if err = randomize.Struct(seed, o, projectsTagDBTypes, true, projectsTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProjectsTagSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProjectsTagsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsTag{}
	if err = randomize.Struct(seed, o, projectsTagDBTypes, true, projectsTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProjectsTags().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	projectsTagDBTypes = map[string]string{`ID`: `integer`, `ProjectID`: `integer`, `TagID`: `integer`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_                  = bytes.MinRead
)

func testProjectsTagsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(projectsTagPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(projectsTagAllColumns) == len(projectsTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsTag{}
	if err = randomize.Struct(seed, o, projectsTagDBTypes, true, projectsTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProjectsTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, projectsTagDBTypes, true, projectsTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProjectsTag struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testProjectsTagsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(projectsTagAllColumns) == len(projectsTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsTag{}
	if err = randomize.Struct(seed, o, projectsTagDBTypes, true, projectsTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProjectsTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, projectsTagDBTypes, true, projectsTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProjectsTag struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(projectsTagAllColumns, projectsTagPrimaryKeyColumns) {
		fields = projectsTagAllColumns
	} else {
		fields = strmangle.SetComplement(
			projectsTagAllColumns,
			projectsTagPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ProjectsTagSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testProjectsTagsUpsert(t *testing.T) {
	t.Parallel()

	if len(projectsTagAllColumns) == len(projectsTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ProjectsTag{}
	if err = randomize.Struct(seed, &o, projectsTagDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ProjectsTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProjectsTag: %s", err)
	}

	count, err := ProjectsTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, projectsTagDBTypes, false, projectsTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProjectsTag struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProjectsTag: %s", err)
	}

	count, err = ProjectsTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

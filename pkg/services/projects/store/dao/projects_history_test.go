// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dao

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testProjectsHistories(t *testing.T) {
	t.Parallel()

	query := ProjectsHistories()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testProjectsHistoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsHistory{}
	if err = randomize.Struct(seed, o, projectsHistoryDBTypes, true, projectsHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProjectsHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProjectsHistoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsHistory{}
	if err = randomize.Struct(seed, o, projectsHistoryDBTypes, true, projectsHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ProjectsHistories().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProjectsHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProjectsHistoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsHistory{}
	if err = randomize.Struct(seed, o, projectsHistoryDBTypes, true, projectsHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProjectsHistorySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProjectsHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProjectsHistoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsHistory{}
	if err = randomize.Struct(seed, o, projectsHistoryDBTypes, true, projectsHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ProjectsHistoryExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ProjectsHistory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ProjectsHistoryExists to return true, but got false.")
	}
}

func testProjectsHistoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsHistory{}
	if err = randomize.Struct(seed, o, projectsHistoryDBTypes, true, projectsHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	projectsHistoryFound, err := FindProjectsHistory(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if projectsHistoryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testProjectsHistoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsHistory{}
	if err = randomize.Struct(seed, o, projectsHistoryDBTypes, true, projectsHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ProjectsHistories().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testProjectsHistoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsHistory{}
	if err = randomize.Struct(seed, o, projectsHistoryDBTypes, true, projectsHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ProjectsHistories().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testProjectsHistoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	projectsHistoryOne := &ProjectsHistory{}
	projectsHistoryTwo := &ProjectsHistory{}
	if err = randomize.Struct(seed, projectsHistoryOne, projectsHistoryDBTypes, false, projectsHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsHistory struct: %s", err)
	}
	if err = randomize.Struct(seed, projectsHistoryTwo, projectsHistoryDBTypes, false, projectsHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = projectsHistoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = projectsHistoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProjectsHistories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testProjectsHistoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	projectsHistoryOne := &ProjectsHistory{}
	projectsHistoryTwo := &ProjectsHistory{}
	if err = randomize.Struct(seed, projectsHistoryOne, projectsHistoryDBTypes, false, projectsHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsHistory struct: %s", err)
	}
	if err = randomize.Struct(seed, projectsHistoryTwo, projectsHistoryDBTypes, false, projectsHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = projectsHistoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = projectsHistoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProjectsHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func projectsHistoryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsHistory) error {
	*o = ProjectsHistory{}
	return nil
}

func projectsHistoryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsHistory) error {
	*o = ProjectsHistory{}
	return nil
}

func projectsHistoryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsHistory) error {
	*o = ProjectsHistory{}
	return nil
}

func projectsHistoryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsHistory) error {
	*o = ProjectsHistory{}
	return nil
}

func projectsHistoryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsHistory) error {
	*o = ProjectsHistory{}
	return nil
}

func projectsHistoryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsHistory) error {
	*o = ProjectsHistory{}
	return nil
}

func projectsHistoryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsHistory) error {
	*o = ProjectsHistory{}
	return nil
}

func projectsHistoryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsHistory) error {
	*o = ProjectsHistory{}
	return nil
}

func projectsHistoryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsHistory) error {
	*o = ProjectsHistory{}
	return nil
}

func testProjectsHistoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ProjectsHistory{}
	o := &ProjectsHistory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, projectsHistoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ProjectsHistory object: %s", err)
	}

	AddProjectsHistoryHook(boil.BeforeInsertHook, projectsHistoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	projectsHistoryBeforeInsertHooks = []ProjectsHistoryHook{}

	AddProjectsHistoryHook(boil.AfterInsertHook, projectsHistoryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	projectsHistoryAfterInsertHooks = []ProjectsHistoryHook{}

	AddProjectsHistoryHook(boil.AfterSelectHook, projectsHistoryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	projectsHistoryAfterSelectHooks = []ProjectsHistoryHook{}

	AddProjectsHistoryHook(boil.BeforeUpdateHook, projectsHistoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	projectsHistoryBeforeUpdateHooks = []ProjectsHistoryHook{}

	AddProjectsHistoryHook(boil.AfterUpdateHook, projectsHistoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	projectsHistoryAfterUpdateHooks = []ProjectsHistoryHook{}

	AddProjectsHistoryHook(boil.BeforeDeleteHook, projectsHistoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	projectsHistoryBeforeDeleteHooks = []ProjectsHistoryHook{}

	AddProjectsHistoryHook(boil.AfterDeleteHook, projectsHistoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	projectsHistoryAfterDeleteHooks = []ProjectsHistoryHook{}

	AddProjectsHistoryHook(boil.BeforeUpsertHook, projectsHistoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	projectsHistoryBeforeUpsertHooks = []ProjectsHistoryHook{}

	AddProjectsHistoryHook(boil.AfterUpsertHook, projectsHistoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	projectsHistoryAfterUpsertHooks = []ProjectsHistoryHook{}
}

func testProjectsHistoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsHistory{}
	if err = randomize.Struct(seed, o, projectsHistoryDBTypes, true, projectsHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProjectsHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProjectsHistoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsHistory{}
	if err = randomize.Struct(seed, o, projectsHistoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ProjectsHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(projectsHistoryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ProjectsHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProjectsHistoryToManyRevisionProjectsCodeFilesHistories(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProjectsHistory
	var b, c ProjectsCodeFilesHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, projectsHistoryDBTypes, true, projectsHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsHistory struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, projectsCodeFilesHistoryDBTypes, false, projectsCodeFilesHistoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, projectsCodeFilesHistoryDBTypes, false, projectsCodeFilesHistoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.RevisionID = a.ID
	c.RevisionID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.RevisionProjectsCodeFilesHistories().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.RevisionID == b.RevisionID {
			bFound = true
		}
		if v.RevisionID == c.RevisionID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProjectsHistorySlice{&a}
	if err = a.L.LoadRevisionProjectsCodeFilesHistories(ctx, tx, false, (*[]*ProjectsHistory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RevisionProjectsCodeFilesHistories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RevisionProjectsCodeFilesHistories = nil
	if err = a.L.LoadRevisionProjectsCodeFilesHistories(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RevisionProjectsCodeFilesHistories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProjectsHistoryToManyAddOpRevisionProjectsCodeFilesHistories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProjectsHistory
	var b, c, d, e ProjectsCodeFilesHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, projectsHistoryDBTypes, false, strmangle.SetComplement(projectsHistoryPrimaryKeyColumns, projectsHistoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProjectsCodeFilesHistory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, projectsCodeFilesHistoryDBTypes, false, strmangle.SetComplement(projectsCodeFilesHistoryPrimaryKeyColumns, projectsCodeFilesHistoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ProjectsCodeFilesHistory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRevisionProjectsCodeFilesHistories(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.RevisionID {
			t.Error("foreign key was wrong value", a.ID, first.RevisionID)
		}
		if a.ID != second.RevisionID {
			t.Error("foreign key was wrong value", a.ID, second.RevisionID)
		}

		if first.R.Revision != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Revision != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RevisionProjectsCodeFilesHistories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RevisionProjectsCodeFilesHistories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RevisionProjectsCodeFilesHistories().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testProjectsHistoryToOneProjectUsingProject(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ProjectsHistory
	var foreign Project

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, projectsHistoryDBTypes, false, projectsHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsHistory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, projectDBTypes, false, projectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Project struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ProjectID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Project().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ProjectsHistorySlice{&local}
	if err = local.L.LoadProject(ctx, tx, false, (*[]*ProjectsHistory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Project == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Project = nil
	if err = local.L.LoadProject(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Project == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testProjectsHistoryToOneSetOpProjectUsingProject(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProjectsHistory
	var b, c Project

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, projectsHistoryDBTypes, false, strmangle.SetComplement(projectsHistoryPrimaryKeyColumns, projectsHistoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, projectDBTypes, false, strmangle.SetComplement(projectPrimaryKeyColumns, projectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, projectDBTypes, false, strmangle.SetComplement(projectPrimaryKeyColumns, projectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Project{&b, &c} {
		err = a.SetProject(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Project != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProjectsHistories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ProjectID != x.ID {
			t.Error("foreign key was wrong value", a.ProjectID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProjectID))
		reflect.Indirect(reflect.ValueOf(&a.ProjectID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ProjectID != x.ID {
			t.Error("foreign key was wrong value", a.ProjectID, x.ID)
		}
	}
}

func testProjectsHistoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsHistory{}
	if err = randomize.Struct(seed, o, projectsHistoryDBTypes, true, projectsHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProjectsHistoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsHistory{}
	if err = randomize.Struct(seed, o, projectsHistoryDBTypes, true, projectsHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProjectsHistorySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProjectsHistoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsHistory{}
	if err = randomize.Struct(seed, o, projectsHistoryDBTypes, true, projectsHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProjectsHistories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	projectsHistoryDBTypes = map[string]string{`ID`: `integer`, `ProjectID`: `integer`, `RevisionNumber`: `integer`}
	_                      = bytes.MinRead
)

func testProjectsHistoriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(projectsHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(projectsHistoryAllColumns) == len(projectsHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsHistory{}
	if err = randomize.Struct(seed, o, projectsHistoryDBTypes, true, projectsHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProjectsHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, projectsHistoryDBTypes, true, projectsHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProjectsHistory struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testProjectsHistoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(projectsHistoryAllColumns) == len(projectsHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsHistory{}
	if err = randomize.Struct(seed, o, projectsHistoryDBTypes, true, projectsHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProjectsHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, projectsHistoryDBTypes, true, projectsHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProjectsHistory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(projectsHistoryAllColumns, projectsHistoryPrimaryKeyColumns) {
		fields = projectsHistoryAllColumns
	} else {
		fields = strmangle.SetComplement(
			projectsHistoryAllColumns,
			projectsHistoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ProjectsHistorySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testProjectsHistoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(projectsHistoryAllColumns) == len(projectsHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ProjectsHistory{}
	if err = randomize.Struct(seed, &o, projectsHistoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ProjectsHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProjectsHistory: %s", err)
	}

	count, err := ProjectsHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, projectsHistoryDBTypes, false, projectsHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProjectsHistory struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProjectsHistory: %s", err)
	}

	count, err = ProjectsHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dao

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCodeFiles(t *testing.T) {
	t.Parallel()

	query := CodeFiles()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCodeFilesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CodeFile{}
	if err = randomize.Struct(seed, o, codeFileDBTypes, true, codeFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CodeFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CodeFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCodeFilesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CodeFile{}
	if err = randomize.Struct(seed, o, codeFileDBTypes, true, codeFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CodeFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := CodeFiles().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CodeFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCodeFilesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CodeFile{}
	if err = randomize.Struct(seed, o, codeFileDBTypes, true, codeFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CodeFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CodeFileSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CodeFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCodeFilesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CodeFile{}
	if err = randomize.Struct(seed, o, codeFileDBTypes, true, codeFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CodeFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CodeFileExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if CodeFile exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CodeFileExists to return true, but got false.")
	}
}

func testCodeFilesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CodeFile{}
	if err = randomize.Struct(seed, o, codeFileDBTypes, true, codeFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CodeFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	codeFileFound, err := FindCodeFile(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if codeFileFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCodeFilesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CodeFile{}
	if err = randomize.Struct(seed, o, codeFileDBTypes, true, codeFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CodeFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = CodeFiles().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCodeFilesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CodeFile{}
	if err = randomize.Struct(seed, o, codeFileDBTypes, true, codeFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CodeFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := CodeFiles().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCodeFilesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	codeFileOne := &CodeFile{}
	codeFileTwo := &CodeFile{}
	if err = randomize.Struct(seed, codeFileOne, codeFileDBTypes, false, codeFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CodeFile struct: %s", err)
	}
	if err = randomize.Struct(seed, codeFileTwo, codeFileDBTypes, false, codeFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CodeFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = codeFileOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = codeFileTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CodeFiles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCodeFilesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	codeFileOne := &CodeFile{}
	codeFileTwo := &CodeFile{}
	if err = randomize.Struct(seed, codeFileOne, codeFileDBTypes, false, codeFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CodeFile struct: %s", err)
	}
	if err = randomize.Struct(seed, codeFileTwo, codeFileDBTypes, false, codeFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CodeFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = codeFileOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = codeFileTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CodeFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func codeFileBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *CodeFile) error {
	*o = CodeFile{}
	return nil
}

func codeFileAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *CodeFile) error {
	*o = CodeFile{}
	return nil
}

func codeFileAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *CodeFile) error {
	*o = CodeFile{}
	return nil
}

func codeFileBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CodeFile) error {
	*o = CodeFile{}
	return nil
}

func codeFileAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CodeFile) error {
	*o = CodeFile{}
	return nil
}

func codeFileBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CodeFile) error {
	*o = CodeFile{}
	return nil
}

func codeFileAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CodeFile) error {
	*o = CodeFile{}
	return nil
}

func codeFileBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CodeFile) error {
	*o = CodeFile{}
	return nil
}

func codeFileAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CodeFile) error {
	*o = CodeFile{}
	return nil
}

func testCodeFilesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &CodeFile{}
	o := &CodeFile{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, codeFileDBTypes, false); err != nil {
		t.Errorf("Unable to randomize CodeFile object: %s", err)
	}

	AddCodeFileHook(boil.BeforeInsertHook, codeFileBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	codeFileBeforeInsertHooks = []CodeFileHook{}

	AddCodeFileHook(boil.AfterInsertHook, codeFileAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	codeFileAfterInsertHooks = []CodeFileHook{}

	AddCodeFileHook(boil.AfterSelectHook, codeFileAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	codeFileAfterSelectHooks = []CodeFileHook{}

	AddCodeFileHook(boil.BeforeUpdateHook, codeFileBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	codeFileBeforeUpdateHooks = []CodeFileHook{}

	AddCodeFileHook(boil.AfterUpdateHook, codeFileAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	codeFileAfterUpdateHooks = []CodeFileHook{}

	AddCodeFileHook(boil.BeforeDeleteHook, codeFileBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	codeFileBeforeDeleteHooks = []CodeFileHook{}

	AddCodeFileHook(boil.AfterDeleteHook, codeFileAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	codeFileAfterDeleteHooks = []CodeFileHook{}

	AddCodeFileHook(boil.BeforeUpsertHook, codeFileBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	codeFileBeforeUpsertHooks = []CodeFileHook{}

	AddCodeFileHook(boil.AfterUpsertHook, codeFileAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	codeFileAfterUpsertHooks = []CodeFileHook{}
}

func testCodeFilesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CodeFile{}
	if err = randomize.Struct(seed, o, codeFileDBTypes, true, codeFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CodeFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CodeFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCodeFilesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CodeFile{}
	if err = randomize.Struct(seed, o, codeFileDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CodeFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(codeFileColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := CodeFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCodeFileToOneProjectUsingProject(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CodeFile
	var foreign Project

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, codeFileDBTypes, false, codeFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CodeFile struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, projectDBTypes, false, projectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Project struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ProjectID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Project().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CodeFileSlice{&local}
	if err = local.L.LoadProject(ctx, tx, false, (*[]*CodeFile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Project == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Project = nil
	if err = local.L.LoadProject(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Project == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCodeFileToOneSetOpProjectUsingProject(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CodeFile
	var b, c Project

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, codeFileDBTypes, false, strmangle.SetComplement(codeFilePrimaryKeyColumns, codeFileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, projectDBTypes, false, strmangle.SetComplement(projectPrimaryKeyColumns, projectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, projectDBTypes, false, strmangle.SetComplement(projectPrimaryKeyColumns, projectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Project{&b, &c} {
		err = a.SetProject(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Project != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CodeFiles[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ProjectID != x.ID {
			t.Error("foreign key was wrong value", a.ProjectID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProjectID))
		reflect.Indirect(reflect.ValueOf(&a.ProjectID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ProjectID != x.ID {
			t.Error("foreign key was wrong value", a.ProjectID, x.ID)
		}
	}
}

func testCodeFilesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CodeFile{}
	if err = randomize.Struct(seed, o, codeFileDBTypes, true, codeFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CodeFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCodeFilesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CodeFile{}
	if err = randomize.Struct(seed, o, codeFileDBTypes, true, codeFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CodeFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CodeFileSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCodeFilesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CodeFile{}
	if err = randomize.Struct(seed, o, codeFileDBTypes, true, codeFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CodeFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CodeFiles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	codeFileDBTypes = map[string]string{`ID`: `integer`, `ProjectID`: `integer`, `Name`: `character varying`, `Content`: `character varying`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_               = bytes.MinRead
)

func testCodeFilesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(codeFilePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(codeFileAllColumns) == len(codeFilePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CodeFile{}
	if err = randomize.Struct(seed, o, codeFileDBTypes, true, codeFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CodeFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CodeFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, codeFileDBTypes, true, codeFilePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CodeFile struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCodeFilesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(codeFileAllColumns) == len(codeFilePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CodeFile{}
	if err = randomize.Struct(seed, o, codeFileDBTypes, true, codeFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CodeFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CodeFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, codeFileDBTypes, true, codeFilePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CodeFile struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(codeFileAllColumns, codeFilePrimaryKeyColumns) {
		fields = codeFileAllColumns
	} else {
		fields = strmangle.SetComplement(
			codeFileAllColumns,
			codeFilePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CodeFileSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCodeFilesUpsert(t *testing.T) {
	t.Parallel()

	if len(codeFileAllColumns) == len(codeFilePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := CodeFile{}
	if err = randomize.Struct(seed, &o, codeFileDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CodeFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CodeFile: %s", err)
	}

	count, err := CodeFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, codeFileDBTypes, false, codeFilePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CodeFile struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CodeFile: %s", err)
	}

	count, err = CodeFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

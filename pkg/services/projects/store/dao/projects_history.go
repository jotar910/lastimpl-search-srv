// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dao

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProjectsHistory is an object representing the database table.
type ProjectsHistory struct {
	ID             int `boil:"id" json:"id" toml:"id" yaml:"id"`
	ProjectID      int `boil:"project_id" json:"project_id" toml:"project_id" yaml:"project_id"`
	RevisionNumber int `boil:"revision_number" json:"revision_number" toml:"revision_number" yaml:"revision_number"`

	R *projectsHistoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L projectsHistoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProjectsHistoryColumns = struct {
	ID             string
	ProjectID      string
	RevisionNumber string
}{
	ID:             "id",
	ProjectID:      "project_id",
	RevisionNumber: "revision_number",
}

var ProjectsHistoryTableColumns = struct {
	ID             string
	ProjectID      string
	RevisionNumber string
}{
	ID:             "projects_history.id",
	ProjectID:      "projects_history.project_id",
	RevisionNumber: "projects_history.revision_number",
}

// Generated where

var ProjectsHistoryWhere = struct {
	ID             whereHelperint
	ProjectID      whereHelperint
	RevisionNumber whereHelperint
}{
	ID:             whereHelperint{field: "\"projects_history\".\"id\""},
	ProjectID:      whereHelperint{field: "\"projects_history\".\"project_id\""},
	RevisionNumber: whereHelperint{field: "\"projects_history\".\"revision_number\""},
}

// ProjectsHistoryRels is where relationship names are stored.
var ProjectsHistoryRels = struct {
	Project                            string
	RevisionProjectsCodeFilesHistories string
}{
	Project:                            "Project",
	RevisionProjectsCodeFilesHistories: "RevisionProjectsCodeFilesHistories",
}

// projectsHistoryR is where relationships are stored.
type projectsHistoryR struct {
	Project                            *Project                      `boil:"Project" json:"Project" toml:"Project" yaml:"Project"`
	RevisionProjectsCodeFilesHistories ProjectsCodeFilesHistorySlice `boil:"RevisionProjectsCodeFilesHistories" json:"RevisionProjectsCodeFilesHistories" toml:"RevisionProjectsCodeFilesHistories" yaml:"RevisionProjectsCodeFilesHistories"`
}

// NewStruct creates a new relationship struct
func (*projectsHistoryR) NewStruct() *projectsHistoryR {
	return &projectsHistoryR{}
}

// projectsHistoryL is where Load methods for each relationship are stored.
type projectsHistoryL struct{}

var (
	projectsHistoryAllColumns            = []string{"id", "project_id", "revision_number"}
	projectsHistoryColumnsWithoutDefault = []string{"project_id"}
	projectsHistoryColumnsWithDefault    = []string{"id", "revision_number"}
	projectsHistoryPrimaryKeyColumns     = []string{"id"}
	projectsHistoryGeneratedColumns      = []string{}
)

type (
	// ProjectsHistorySlice is an alias for a slice of pointers to ProjectsHistory.
	// This should almost always be used instead of []ProjectsHistory.
	ProjectsHistorySlice []*ProjectsHistory
	// ProjectsHistoryHook is the signature for custom ProjectsHistory hook methods
	ProjectsHistoryHook func(context.Context, boil.ContextExecutor, *ProjectsHistory) error

	projectsHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	projectsHistoryType                 = reflect.TypeOf(&ProjectsHistory{})
	projectsHistoryMapping              = queries.MakeStructMapping(projectsHistoryType)
	projectsHistoryPrimaryKeyMapping, _ = queries.BindMapping(projectsHistoryType, projectsHistoryMapping, projectsHistoryPrimaryKeyColumns)
	projectsHistoryInsertCacheMut       sync.RWMutex
	projectsHistoryInsertCache          = make(map[string]insertCache)
	projectsHistoryUpdateCacheMut       sync.RWMutex
	projectsHistoryUpdateCache          = make(map[string]updateCache)
	projectsHistoryUpsertCacheMut       sync.RWMutex
	projectsHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var projectsHistoryAfterSelectHooks []ProjectsHistoryHook

var projectsHistoryBeforeInsertHooks []ProjectsHistoryHook
var projectsHistoryAfterInsertHooks []ProjectsHistoryHook

var projectsHistoryBeforeUpdateHooks []ProjectsHistoryHook
var projectsHistoryAfterUpdateHooks []ProjectsHistoryHook

var projectsHistoryBeforeDeleteHooks []ProjectsHistoryHook
var projectsHistoryAfterDeleteHooks []ProjectsHistoryHook

var projectsHistoryBeforeUpsertHooks []ProjectsHistoryHook
var projectsHistoryAfterUpsertHooks []ProjectsHistoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProjectsHistory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectsHistoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProjectsHistory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectsHistoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProjectsHistory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectsHistoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProjectsHistory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectsHistoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProjectsHistory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectsHistoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProjectsHistory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectsHistoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProjectsHistory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectsHistoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProjectsHistory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectsHistoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProjectsHistory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectsHistoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProjectsHistoryHook registers your hook function for all future operations.
func AddProjectsHistoryHook(hookPoint boil.HookPoint, projectsHistoryHook ProjectsHistoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		projectsHistoryAfterSelectHooks = append(projectsHistoryAfterSelectHooks, projectsHistoryHook)
	case boil.BeforeInsertHook:
		projectsHistoryBeforeInsertHooks = append(projectsHistoryBeforeInsertHooks, projectsHistoryHook)
	case boil.AfterInsertHook:
		projectsHistoryAfterInsertHooks = append(projectsHistoryAfterInsertHooks, projectsHistoryHook)
	case boil.BeforeUpdateHook:
		projectsHistoryBeforeUpdateHooks = append(projectsHistoryBeforeUpdateHooks, projectsHistoryHook)
	case boil.AfterUpdateHook:
		projectsHistoryAfterUpdateHooks = append(projectsHistoryAfterUpdateHooks, projectsHistoryHook)
	case boil.BeforeDeleteHook:
		projectsHistoryBeforeDeleteHooks = append(projectsHistoryBeforeDeleteHooks, projectsHistoryHook)
	case boil.AfterDeleteHook:
		projectsHistoryAfterDeleteHooks = append(projectsHistoryAfterDeleteHooks, projectsHistoryHook)
	case boil.BeforeUpsertHook:
		projectsHistoryBeforeUpsertHooks = append(projectsHistoryBeforeUpsertHooks, projectsHistoryHook)
	case boil.AfterUpsertHook:
		projectsHistoryAfterUpsertHooks = append(projectsHistoryAfterUpsertHooks, projectsHistoryHook)
	}
}

// One returns a single projectsHistory record from the query.
func (q projectsHistoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProjectsHistory, error) {
	o := &ProjectsHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dao: failed to execute a one query for projects_history")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProjectsHistory records from the query.
func (q projectsHistoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProjectsHistorySlice, error) {
	var o []*ProjectsHistory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dao: failed to assign all query results to ProjectsHistory slice")
	}

	if len(projectsHistoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProjectsHistory records in the query.
func (q projectsHistoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to count projects_history rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q projectsHistoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dao: failed to check if projects_history exists")
	}

	return count > 0, nil
}

// Project pointed to by the foreign key.
func (o *ProjectsHistory) Project(mods ...qm.QueryMod) projectQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProjectID),
	}

	queryMods = append(queryMods, mods...)

	query := Projects(queryMods...)
	queries.SetFrom(query.Query, "\"projects\"")

	return query
}

// RevisionProjectsCodeFilesHistories retrieves all the projects_code_files_history's ProjectsCodeFilesHistories with an executor via revision_id column.
func (o *ProjectsHistory) RevisionProjectsCodeFilesHistories(mods ...qm.QueryMod) projectsCodeFilesHistoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"projects_code_files_history\".\"revision_id\"=?", o.ID),
	)

	query := ProjectsCodeFilesHistories(queryMods...)
	queries.SetFrom(query.Query, "\"projects_code_files_history\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"projects_code_files_history\".*"})
	}

	return query
}

// LoadProject allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (projectsHistoryL) LoadProject(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProjectsHistory interface{}, mods queries.Applicator) error {
	var slice []*ProjectsHistory
	var object *ProjectsHistory

	if singular {
		object = maybeProjectsHistory.(*ProjectsHistory)
	} else {
		slice = *maybeProjectsHistory.(*[]*ProjectsHistory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &projectsHistoryR{}
		}
		args = append(args, object.ProjectID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &projectsHistoryR{}
			}

			for _, a := range args {
				if a == obj.ProjectID {
					continue Outer
				}
			}

			args = append(args, obj.ProjectID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`projects`),
		qm.WhereIn(`projects.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Project")
	}

	var resultSlice []*Project
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Project")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for projects")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for projects")
	}

	if len(projectsHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Project = foreign
		if foreign.R == nil {
			foreign.R = &projectR{}
		}
		foreign.R.ProjectsHistories = append(foreign.R.ProjectsHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProjectID == foreign.ID {
				local.R.Project = foreign
				if foreign.R == nil {
					foreign.R = &projectR{}
				}
				foreign.R.ProjectsHistories = append(foreign.R.ProjectsHistories, local)
				break
			}
		}
	}

	return nil
}

// LoadRevisionProjectsCodeFilesHistories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (projectsHistoryL) LoadRevisionProjectsCodeFilesHistories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProjectsHistory interface{}, mods queries.Applicator) error {
	var slice []*ProjectsHistory
	var object *ProjectsHistory

	if singular {
		object = maybeProjectsHistory.(*ProjectsHistory)
	} else {
		slice = *maybeProjectsHistory.(*[]*ProjectsHistory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &projectsHistoryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &projectsHistoryR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`projects_code_files_history`),
		qm.WhereIn(`projects_code_files_history.revision_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load projects_code_files_history")
	}

	var resultSlice []*ProjectsCodeFilesHistory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice projects_code_files_history")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on projects_code_files_history")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for projects_code_files_history")
	}

	if len(projectsCodeFilesHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RevisionProjectsCodeFilesHistories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &projectsCodeFilesHistoryR{}
			}
			foreign.R.Revision = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RevisionID {
				local.R.RevisionProjectsCodeFilesHistories = append(local.R.RevisionProjectsCodeFilesHistories, foreign)
				if foreign.R == nil {
					foreign.R = &projectsCodeFilesHistoryR{}
				}
				foreign.R.Revision = local
				break
			}
		}
	}

	return nil
}

// SetProject of the projectsHistory to the related item.
// Sets o.R.Project to related.
// Adds o to related.R.ProjectsHistories.
func (o *ProjectsHistory) SetProject(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Project) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"projects_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"project_id"}),
		strmangle.WhereClause("\"", "\"", 2, projectsHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProjectID = related.ID
	if o.R == nil {
		o.R = &projectsHistoryR{
			Project: related,
		}
	} else {
		o.R.Project = related
	}

	if related.R == nil {
		related.R = &projectR{
			ProjectsHistories: ProjectsHistorySlice{o},
		}
	} else {
		related.R.ProjectsHistories = append(related.R.ProjectsHistories, o)
	}

	return nil
}

// AddRevisionProjectsCodeFilesHistories adds the given related objects to the existing relationships
// of the projects_history, optionally inserting them as new records.
// Appends related to o.R.RevisionProjectsCodeFilesHistories.
// Sets related.R.Revision appropriately.
func (o *ProjectsHistory) AddRevisionProjectsCodeFilesHistories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProjectsCodeFilesHistory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RevisionID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"projects_code_files_history\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"revision_id"}),
				strmangle.WhereClause("\"", "\"", 2, projectsCodeFilesHistoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RevisionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &projectsHistoryR{
			RevisionProjectsCodeFilesHistories: related,
		}
	} else {
		o.R.RevisionProjectsCodeFilesHistories = append(o.R.RevisionProjectsCodeFilesHistories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &projectsCodeFilesHistoryR{
				Revision: o,
			}
		} else {
			rel.R.Revision = o
		}
	}
	return nil
}

// ProjectsHistories retrieves all the records using an executor.
func ProjectsHistories(mods ...qm.QueryMod) projectsHistoryQuery {
	mods = append(mods, qm.From("\"projects_history\""))
	return projectsHistoryQuery{NewQuery(mods...)}
}

// FindProjectsHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProjectsHistory(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ProjectsHistory, error) {
	projectsHistoryObj := &ProjectsHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"projects_history\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, projectsHistoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dao: unable to select from projects_history")
	}

	if err = projectsHistoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return projectsHistoryObj, err
	}

	return projectsHistoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProjectsHistory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dao: no projects_history provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(projectsHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	projectsHistoryInsertCacheMut.RLock()
	cache, cached := projectsHistoryInsertCache[key]
	projectsHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			projectsHistoryAllColumns,
			projectsHistoryColumnsWithDefault,
			projectsHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(projectsHistoryType, projectsHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(projectsHistoryType, projectsHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"projects_history\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"projects_history\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dao: unable to insert into projects_history")
	}

	if !cached {
		projectsHistoryInsertCacheMut.Lock()
		projectsHistoryInsertCache[key] = cache
		projectsHistoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProjectsHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProjectsHistory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	projectsHistoryUpdateCacheMut.RLock()
	cache, cached := projectsHistoryUpdateCache[key]
	projectsHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			projectsHistoryAllColumns,
			projectsHistoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dao: unable to update projects_history, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"projects_history\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, projectsHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(projectsHistoryType, projectsHistoryMapping, append(wl, projectsHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to update projects_history row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by update for projects_history")
	}

	if !cached {
		projectsHistoryUpdateCacheMut.Lock()
		projectsHistoryUpdateCache[key] = cache
		projectsHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q projectsHistoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to update all for projects_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to retrieve rows affected for projects_history")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProjectsHistorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dao: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), projectsHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"projects_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, projectsHistoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to update all in projectsHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to retrieve rows affected all in update all projectsHistory")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProjectsHistory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dao: no projects_history provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(projectsHistoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	projectsHistoryUpsertCacheMut.RLock()
	cache, cached := projectsHistoryUpsertCache[key]
	projectsHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			projectsHistoryAllColumns,
			projectsHistoryColumnsWithDefault,
			projectsHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			projectsHistoryAllColumns,
			projectsHistoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dao: unable to upsert projects_history, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(projectsHistoryPrimaryKeyColumns))
			copy(conflict, projectsHistoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"projects_history\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(projectsHistoryType, projectsHistoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(projectsHistoryType, projectsHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dao: unable to upsert projects_history")
	}

	if !cached {
		projectsHistoryUpsertCacheMut.Lock()
		projectsHistoryUpsertCache[key] = cache
		projectsHistoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProjectsHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProjectsHistory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dao: no ProjectsHistory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), projectsHistoryPrimaryKeyMapping)
	sql := "DELETE FROM \"projects_history\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to delete from projects_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by delete for projects_history")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q projectsHistoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dao: no projectsHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to delete all from projects_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by deleteall for projects_history")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProjectsHistorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(projectsHistoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), projectsHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"projects_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, projectsHistoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to delete all from projectsHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by deleteall for projects_history")
	}

	if len(projectsHistoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProjectsHistory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProjectsHistory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProjectsHistorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProjectsHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), projectsHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"projects_history\".* FROM \"projects_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, projectsHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dao: unable to reload all in ProjectsHistorySlice")
	}

	*o = slice

	return nil
}

// ProjectsHistoryExists checks if the ProjectsHistory row exists.
func ProjectsHistoryExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"projects_history\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dao: unable to check if projects_history exists")
	}

	return exists, nil
}

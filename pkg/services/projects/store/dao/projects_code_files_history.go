// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dao

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProjectsCodeFilesHistory is an object representing the database table.
type ProjectsCodeFilesHistory struct {
	ID         int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name       string `boil:"name" json:"name" toml:"name" yaml:"name"`
	Content    string `boil:"content" json:"content" toml:"content" yaml:"content"`
	RevisionID int    `boil:"revision_id" json:"revision_id" toml:"revision_id" yaml:"revision_id"`

	R *projectsCodeFilesHistoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L projectsCodeFilesHistoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProjectsCodeFilesHistoryColumns = struct {
	ID         string
	Name       string
	Content    string
	RevisionID string
}{
	ID:         "id",
	Name:       "name",
	Content:    "content",
	RevisionID: "revision_id",
}

var ProjectsCodeFilesHistoryTableColumns = struct {
	ID         string
	Name       string
	Content    string
	RevisionID string
}{
	ID:         "projects_code_files_history.id",
	Name:       "projects_code_files_history.name",
	Content:    "projects_code_files_history.content",
	RevisionID: "projects_code_files_history.revision_id",
}

// Generated where

var ProjectsCodeFilesHistoryWhere = struct {
	ID         whereHelperint
	Name       whereHelperstring
	Content    whereHelperstring
	RevisionID whereHelperint
}{
	ID:         whereHelperint{field: "\"projects_code_files_history\".\"id\""},
	Name:       whereHelperstring{field: "\"projects_code_files_history\".\"name\""},
	Content:    whereHelperstring{field: "\"projects_code_files_history\".\"content\""},
	RevisionID: whereHelperint{field: "\"projects_code_files_history\".\"revision_id\""},
}

// ProjectsCodeFilesHistoryRels is where relationship names are stored.
var ProjectsCodeFilesHistoryRels = struct {
	Revision string
}{
	Revision: "Revision",
}

// projectsCodeFilesHistoryR is where relationships are stored.
type projectsCodeFilesHistoryR struct {
	Revision *ProjectsHistory `boil:"Revision" json:"Revision" toml:"Revision" yaml:"Revision"`
}

// NewStruct creates a new relationship struct
func (*projectsCodeFilesHistoryR) NewStruct() *projectsCodeFilesHistoryR {
	return &projectsCodeFilesHistoryR{}
}

// projectsCodeFilesHistoryL is where Load methods for each relationship are stored.
type projectsCodeFilesHistoryL struct{}

var (
	projectsCodeFilesHistoryAllColumns            = []string{"id", "name", "content", "revision_id"}
	projectsCodeFilesHistoryColumnsWithoutDefault = []string{"name", "content", "revision_id"}
	projectsCodeFilesHistoryColumnsWithDefault    = []string{"id"}
	projectsCodeFilesHistoryPrimaryKeyColumns     = []string{"id"}
	projectsCodeFilesHistoryGeneratedColumns      = []string{}
)

type (
	// ProjectsCodeFilesHistorySlice is an alias for a slice of pointers to ProjectsCodeFilesHistory.
	// This should almost always be used instead of []ProjectsCodeFilesHistory.
	ProjectsCodeFilesHistorySlice []*ProjectsCodeFilesHistory
	// ProjectsCodeFilesHistoryHook is the signature for custom ProjectsCodeFilesHistory hook methods
	ProjectsCodeFilesHistoryHook func(context.Context, boil.ContextExecutor, *ProjectsCodeFilesHistory) error

	projectsCodeFilesHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	projectsCodeFilesHistoryType                 = reflect.TypeOf(&ProjectsCodeFilesHistory{})
	projectsCodeFilesHistoryMapping              = queries.MakeStructMapping(projectsCodeFilesHistoryType)
	projectsCodeFilesHistoryPrimaryKeyMapping, _ = queries.BindMapping(projectsCodeFilesHistoryType, projectsCodeFilesHistoryMapping, projectsCodeFilesHistoryPrimaryKeyColumns)
	projectsCodeFilesHistoryInsertCacheMut       sync.RWMutex
	projectsCodeFilesHistoryInsertCache          = make(map[string]insertCache)
	projectsCodeFilesHistoryUpdateCacheMut       sync.RWMutex
	projectsCodeFilesHistoryUpdateCache          = make(map[string]updateCache)
	projectsCodeFilesHistoryUpsertCacheMut       sync.RWMutex
	projectsCodeFilesHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var projectsCodeFilesHistoryAfterSelectHooks []ProjectsCodeFilesHistoryHook

var projectsCodeFilesHistoryBeforeInsertHooks []ProjectsCodeFilesHistoryHook
var projectsCodeFilesHistoryAfterInsertHooks []ProjectsCodeFilesHistoryHook

var projectsCodeFilesHistoryBeforeUpdateHooks []ProjectsCodeFilesHistoryHook
var projectsCodeFilesHistoryAfterUpdateHooks []ProjectsCodeFilesHistoryHook

var projectsCodeFilesHistoryBeforeDeleteHooks []ProjectsCodeFilesHistoryHook
var projectsCodeFilesHistoryAfterDeleteHooks []ProjectsCodeFilesHistoryHook

var projectsCodeFilesHistoryBeforeUpsertHooks []ProjectsCodeFilesHistoryHook
var projectsCodeFilesHistoryAfterUpsertHooks []ProjectsCodeFilesHistoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProjectsCodeFilesHistory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectsCodeFilesHistoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProjectsCodeFilesHistory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectsCodeFilesHistoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProjectsCodeFilesHistory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectsCodeFilesHistoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProjectsCodeFilesHistory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectsCodeFilesHistoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProjectsCodeFilesHistory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectsCodeFilesHistoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProjectsCodeFilesHistory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectsCodeFilesHistoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProjectsCodeFilesHistory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectsCodeFilesHistoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProjectsCodeFilesHistory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectsCodeFilesHistoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProjectsCodeFilesHistory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectsCodeFilesHistoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProjectsCodeFilesHistoryHook registers your hook function for all future operations.
func AddProjectsCodeFilesHistoryHook(hookPoint boil.HookPoint, projectsCodeFilesHistoryHook ProjectsCodeFilesHistoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		projectsCodeFilesHistoryAfterSelectHooks = append(projectsCodeFilesHistoryAfterSelectHooks, projectsCodeFilesHistoryHook)
	case boil.BeforeInsertHook:
		projectsCodeFilesHistoryBeforeInsertHooks = append(projectsCodeFilesHistoryBeforeInsertHooks, projectsCodeFilesHistoryHook)
	case boil.AfterInsertHook:
		projectsCodeFilesHistoryAfterInsertHooks = append(projectsCodeFilesHistoryAfterInsertHooks, projectsCodeFilesHistoryHook)
	case boil.BeforeUpdateHook:
		projectsCodeFilesHistoryBeforeUpdateHooks = append(projectsCodeFilesHistoryBeforeUpdateHooks, projectsCodeFilesHistoryHook)
	case boil.AfterUpdateHook:
		projectsCodeFilesHistoryAfterUpdateHooks = append(projectsCodeFilesHistoryAfterUpdateHooks, projectsCodeFilesHistoryHook)
	case boil.BeforeDeleteHook:
		projectsCodeFilesHistoryBeforeDeleteHooks = append(projectsCodeFilesHistoryBeforeDeleteHooks, projectsCodeFilesHistoryHook)
	case boil.AfterDeleteHook:
		projectsCodeFilesHistoryAfterDeleteHooks = append(projectsCodeFilesHistoryAfterDeleteHooks, projectsCodeFilesHistoryHook)
	case boil.BeforeUpsertHook:
		projectsCodeFilesHistoryBeforeUpsertHooks = append(projectsCodeFilesHistoryBeforeUpsertHooks, projectsCodeFilesHistoryHook)
	case boil.AfterUpsertHook:
		projectsCodeFilesHistoryAfterUpsertHooks = append(projectsCodeFilesHistoryAfterUpsertHooks, projectsCodeFilesHistoryHook)
	}
}

// One returns a single projectsCodeFilesHistory record from the query.
func (q projectsCodeFilesHistoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProjectsCodeFilesHistory, error) {
	o := &ProjectsCodeFilesHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dao: failed to execute a one query for projects_code_files_history")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProjectsCodeFilesHistory records from the query.
func (q projectsCodeFilesHistoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProjectsCodeFilesHistorySlice, error) {
	var o []*ProjectsCodeFilesHistory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dao: failed to assign all query results to ProjectsCodeFilesHistory slice")
	}

	if len(projectsCodeFilesHistoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProjectsCodeFilesHistory records in the query.
func (q projectsCodeFilesHistoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to count projects_code_files_history rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q projectsCodeFilesHistoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dao: failed to check if projects_code_files_history exists")
	}

	return count > 0, nil
}

// Revision pointed to by the foreign key.
func (o *ProjectsCodeFilesHistory) Revision(mods ...qm.QueryMod) projectsHistoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RevisionID),
	}

	queryMods = append(queryMods, mods...)

	query := ProjectsHistories(queryMods...)
	queries.SetFrom(query.Query, "\"projects_history\"")

	return query
}

// LoadRevision allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (projectsCodeFilesHistoryL) LoadRevision(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProjectsCodeFilesHistory interface{}, mods queries.Applicator) error {
	var slice []*ProjectsCodeFilesHistory
	var object *ProjectsCodeFilesHistory

	if singular {
		object = maybeProjectsCodeFilesHistory.(*ProjectsCodeFilesHistory)
	} else {
		slice = *maybeProjectsCodeFilesHistory.(*[]*ProjectsCodeFilesHistory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &projectsCodeFilesHistoryR{}
		}
		args = append(args, object.RevisionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &projectsCodeFilesHistoryR{}
			}

			for _, a := range args {
				if a == obj.RevisionID {
					continue Outer
				}
			}

			args = append(args, obj.RevisionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`projects_history`),
		qm.WhereIn(`projects_history.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProjectsHistory")
	}

	var resultSlice []*ProjectsHistory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProjectsHistory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for projects_history")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for projects_history")
	}

	if len(projectsCodeFilesHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Revision = foreign
		if foreign.R == nil {
			foreign.R = &projectsHistoryR{}
		}
		foreign.R.RevisionProjectsCodeFilesHistories = append(foreign.R.RevisionProjectsCodeFilesHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RevisionID == foreign.ID {
				local.R.Revision = foreign
				if foreign.R == nil {
					foreign.R = &projectsHistoryR{}
				}
				foreign.R.RevisionProjectsCodeFilesHistories = append(foreign.R.RevisionProjectsCodeFilesHistories, local)
				break
			}
		}
	}

	return nil
}

// SetRevision of the projectsCodeFilesHistory to the related item.
// Sets o.R.Revision to related.
// Adds o to related.R.RevisionProjectsCodeFilesHistories.
func (o *ProjectsCodeFilesHistory) SetRevision(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ProjectsHistory) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"projects_code_files_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"revision_id"}),
		strmangle.WhereClause("\"", "\"", 2, projectsCodeFilesHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RevisionID = related.ID
	if o.R == nil {
		o.R = &projectsCodeFilesHistoryR{
			Revision: related,
		}
	} else {
		o.R.Revision = related
	}

	if related.R == nil {
		related.R = &projectsHistoryR{
			RevisionProjectsCodeFilesHistories: ProjectsCodeFilesHistorySlice{o},
		}
	} else {
		related.R.RevisionProjectsCodeFilesHistories = append(related.R.RevisionProjectsCodeFilesHistories, o)
	}

	return nil
}

// ProjectsCodeFilesHistories retrieves all the records using an executor.
func ProjectsCodeFilesHistories(mods ...qm.QueryMod) projectsCodeFilesHistoryQuery {
	mods = append(mods, qm.From("\"projects_code_files_history\""))
	return projectsCodeFilesHistoryQuery{NewQuery(mods...)}
}

// FindProjectsCodeFilesHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProjectsCodeFilesHistory(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ProjectsCodeFilesHistory, error) {
	projectsCodeFilesHistoryObj := &ProjectsCodeFilesHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"projects_code_files_history\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, projectsCodeFilesHistoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dao: unable to select from projects_code_files_history")
	}

	if err = projectsCodeFilesHistoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return projectsCodeFilesHistoryObj, err
	}

	return projectsCodeFilesHistoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProjectsCodeFilesHistory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dao: no projects_code_files_history provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(projectsCodeFilesHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	projectsCodeFilesHistoryInsertCacheMut.RLock()
	cache, cached := projectsCodeFilesHistoryInsertCache[key]
	projectsCodeFilesHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			projectsCodeFilesHistoryAllColumns,
			projectsCodeFilesHistoryColumnsWithDefault,
			projectsCodeFilesHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(projectsCodeFilesHistoryType, projectsCodeFilesHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(projectsCodeFilesHistoryType, projectsCodeFilesHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"projects_code_files_history\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"projects_code_files_history\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dao: unable to insert into projects_code_files_history")
	}

	if !cached {
		projectsCodeFilesHistoryInsertCacheMut.Lock()
		projectsCodeFilesHistoryInsertCache[key] = cache
		projectsCodeFilesHistoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProjectsCodeFilesHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProjectsCodeFilesHistory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	projectsCodeFilesHistoryUpdateCacheMut.RLock()
	cache, cached := projectsCodeFilesHistoryUpdateCache[key]
	projectsCodeFilesHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			projectsCodeFilesHistoryAllColumns,
			projectsCodeFilesHistoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dao: unable to update projects_code_files_history, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"projects_code_files_history\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, projectsCodeFilesHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(projectsCodeFilesHistoryType, projectsCodeFilesHistoryMapping, append(wl, projectsCodeFilesHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to update projects_code_files_history row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by update for projects_code_files_history")
	}

	if !cached {
		projectsCodeFilesHistoryUpdateCacheMut.Lock()
		projectsCodeFilesHistoryUpdateCache[key] = cache
		projectsCodeFilesHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q projectsCodeFilesHistoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to update all for projects_code_files_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to retrieve rows affected for projects_code_files_history")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProjectsCodeFilesHistorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dao: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), projectsCodeFilesHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"projects_code_files_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, projectsCodeFilesHistoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to update all in projectsCodeFilesHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to retrieve rows affected all in update all projectsCodeFilesHistory")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProjectsCodeFilesHistory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dao: no projects_code_files_history provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(projectsCodeFilesHistoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	projectsCodeFilesHistoryUpsertCacheMut.RLock()
	cache, cached := projectsCodeFilesHistoryUpsertCache[key]
	projectsCodeFilesHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			projectsCodeFilesHistoryAllColumns,
			projectsCodeFilesHistoryColumnsWithDefault,
			projectsCodeFilesHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			projectsCodeFilesHistoryAllColumns,
			projectsCodeFilesHistoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dao: unable to upsert projects_code_files_history, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(projectsCodeFilesHistoryPrimaryKeyColumns))
			copy(conflict, projectsCodeFilesHistoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"projects_code_files_history\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(projectsCodeFilesHistoryType, projectsCodeFilesHistoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(projectsCodeFilesHistoryType, projectsCodeFilesHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dao: unable to upsert projects_code_files_history")
	}

	if !cached {
		projectsCodeFilesHistoryUpsertCacheMut.Lock()
		projectsCodeFilesHistoryUpsertCache[key] = cache
		projectsCodeFilesHistoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProjectsCodeFilesHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProjectsCodeFilesHistory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dao: no ProjectsCodeFilesHistory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), projectsCodeFilesHistoryPrimaryKeyMapping)
	sql := "DELETE FROM \"projects_code_files_history\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to delete from projects_code_files_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by delete for projects_code_files_history")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q projectsCodeFilesHistoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dao: no projectsCodeFilesHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to delete all from projects_code_files_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by deleteall for projects_code_files_history")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProjectsCodeFilesHistorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(projectsCodeFilesHistoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), projectsCodeFilesHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"projects_code_files_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, projectsCodeFilesHistoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to delete all from projectsCodeFilesHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by deleteall for projects_code_files_history")
	}

	if len(projectsCodeFilesHistoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProjectsCodeFilesHistory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProjectsCodeFilesHistory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProjectsCodeFilesHistorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProjectsCodeFilesHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), projectsCodeFilesHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"projects_code_files_history\".* FROM \"projects_code_files_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, projectsCodeFilesHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dao: unable to reload all in ProjectsCodeFilesHistorySlice")
	}

	*o = slice

	return nil
}

// ProjectsCodeFilesHistoryExists checks if the ProjectsCodeFilesHistory row exists.
func ProjectsCodeFilesHistoryExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"projects_code_files_history\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dao: unable to check if projects_code_files_history exists")
	}

	return exists, nil
}

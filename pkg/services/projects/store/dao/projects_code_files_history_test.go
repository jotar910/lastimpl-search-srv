// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dao

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testProjectsCodeFilesHistories(t *testing.T) {
	t.Parallel()

	query := ProjectsCodeFilesHistories()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testProjectsCodeFilesHistoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsCodeFilesHistory{}
	if err = randomize.Struct(seed, o, projectsCodeFilesHistoryDBTypes, true, projectsCodeFilesHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsCodeFilesHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProjectsCodeFilesHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProjectsCodeFilesHistoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsCodeFilesHistory{}
	if err = randomize.Struct(seed, o, projectsCodeFilesHistoryDBTypes, true, projectsCodeFilesHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsCodeFilesHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ProjectsCodeFilesHistories().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProjectsCodeFilesHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProjectsCodeFilesHistoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsCodeFilesHistory{}
	if err = randomize.Struct(seed, o, projectsCodeFilesHistoryDBTypes, true, projectsCodeFilesHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsCodeFilesHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProjectsCodeFilesHistorySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProjectsCodeFilesHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProjectsCodeFilesHistoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsCodeFilesHistory{}
	if err = randomize.Struct(seed, o, projectsCodeFilesHistoryDBTypes, true, projectsCodeFilesHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsCodeFilesHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ProjectsCodeFilesHistoryExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ProjectsCodeFilesHistory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ProjectsCodeFilesHistoryExists to return true, but got false.")
	}
}

func testProjectsCodeFilesHistoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsCodeFilesHistory{}
	if err = randomize.Struct(seed, o, projectsCodeFilesHistoryDBTypes, true, projectsCodeFilesHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsCodeFilesHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	projectsCodeFilesHistoryFound, err := FindProjectsCodeFilesHistory(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if projectsCodeFilesHistoryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testProjectsCodeFilesHistoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsCodeFilesHistory{}
	if err = randomize.Struct(seed, o, projectsCodeFilesHistoryDBTypes, true, projectsCodeFilesHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsCodeFilesHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ProjectsCodeFilesHistories().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testProjectsCodeFilesHistoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsCodeFilesHistory{}
	if err = randomize.Struct(seed, o, projectsCodeFilesHistoryDBTypes, true, projectsCodeFilesHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsCodeFilesHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ProjectsCodeFilesHistories().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testProjectsCodeFilesHistoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	projectsCodeFilesHistoryOne := &ProjectsCodeFilesHistory{}
	projectsCodeFilesHistoryTwo := &ProjectsCodeFilesHistory{}
	if err = randomize.Struct(seed, projectsCodeFilesHistoryOne, projectsCodeFilesHistoryDBTypes, false, projectsCodeFilesHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsCodeFilesHistory struct: %s", err)
	}
	if err = randomize.Struct(seed, projectsCodeFilesHistoryTwo, projectsCodeFilesHistoryDBTypes, false, projectsCodeFilesHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsCodeFilesHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = projectsCodeFilesHistoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = projectsCodeFilesHistoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProjectsCodeFilesHistories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testProjectsCodeFilesHistoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	projectsCodeFilesHistoryOne := &ProjectsCodeFilesHistory{}
	projectsCodeFilesHistoryTwo := &ProjectsCodeFilesHistory{}
	if err = randomize.Struct(seed, projectsCodeFilesHistoryOne, projectsCodeFilesHistoryDBTypes, false, projectsCodeFilesHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsCodeFilesHistory struct: %s", err)
	}
	if err = randomize.Struct(seed, projectsCodeFilesHistoryTwo, projectsCodeFilesHistoryDBTypes, false, projectsCodeFilesHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsCodeFilesHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = projectsCodeFilesHistoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = projectsCodeFilesHistoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProjectsCodeFilesHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func projectsCodeFilesHistoryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsCodeFilesHistory) error {
	*o = ProjectsCodeFilesHistory{}
	return nil
}

func projectsCodeFilesHistoryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsCodeFilesHistory) error {
	*o = ProjectsCodeFilesHistory{}
	return nil
}

func projectsCodeFilesHistoryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsCodeFilesHistory) error {
	*o = ProjectsCodeFilesHistory{}
	return nil
}

func projectsCodeFilesHistoryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsCodeFilesHistory) error {
	*o = ProjectsCodeFilesHistory{}
	return nil
}

func projectsCodeFilesHistoryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsCodeFilesHistory) error {
	*o = ProjectsCodeFilesHistory{}
	return nil
}

func projectsCodeFilesHistoryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsCodeFilesHistory) error {
	*o = ProjectsCodeFilesHistory{}
	return nil
}

func projectsCodeFilesHistoryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsCodeFilesHistory) error {
	*o = ProjectsCodeFilesHistory{}
	return nil
}

func projectsCodeFilesHistoryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsCodeFilesHistory) error {
	*o = ProjectsCodeFilesHistory{}
	return nil
}

func projectsCodeFilesHistoryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsCodeFilesHistory) error {
	*o = ProjectsCodeFilesHistory{}
	return nil
}

func testProjectsCodeFilesHistoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ProjectsCodeFilesHistory{}
	o := &ProjectsCodeFilesHistory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, projectsCodeFilesHistoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ProjectsCodeFilesHistory object: %s", err)
	}

	AddProjectsCodeFilesHistoryHook(boil.BeforeInsertHook, projectsCodeFilesHistoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	projectsCodeFilesHistoryBeforeInsertHooks = []ProjectsCodeFilesHistoryHook{}

	AddProjectsCodeFilesHistoryHook(boil.AfterInsertHook, projectsCodeFilesHistoryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	projectsCodeFilesHistoryAfterInsertHooks = []ProjectsCodeFilesHistoryHook{}

	AddProjectsCodeFilesHistoryHook(boil.AfterSelectHook, projectsCodeFilesHistoryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	projectsCodeFilesHistoryAfterSelectHooks = []ProjectsCodeFilesHistoryHook{}

	AddProjectsCodeFilesHistoryHook(boil.BeforeUpdateHook, projectsCodeFilesHistoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	projectsCodeFilesHistoryBeforeUpdateHooks = []ProjectsCodeFilesHistoryHook{}

	AddProjectsCodeFilesHistoryHook(boil.AfterUpdateHook, projectsCodeFilesHistoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	projectsCodeFilesHistoryAfterUpdateHooks = []ProjectsCodeFilesHistoryHook{}

	AddProjectsCodeFilesHistoryHook(boil.BeforeDeleteHook, projectsCodeFilesHistoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	projectsCodeFilesHistoryBeforeDeleteHooks = []ProjectsCodeFilesHistoryHook{}

	AddProjectsCodeFilesHistoryHook(boil.AfterDeleteHook, projectsCodeFilesHistoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	projectsCodeFilesHistoryAfterDeleteHooks = []ProjectsCodeFilesHistoryHook{}

	AddProjectsCodeFilesHistoryHook(boil.BeforeUpsertHook, projectsCodeFilesHistoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	projectsCodeFilesHistoryBeforeUpsertHooks = []ProjectsCodeFilesHistoryHook{}

	AddProjectsCodeFilesHistoryHook(boil.AfterUpsertHook, projectsCodeFilesHistoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	projectsCodeFilesHistoryAfterUpsertHooks = []ProjectsCodeFilesHistoryHook{}
}

func testProjectsCodeFilesHistoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsCodeFilesHistory{}
	if err = randomize.Struct(seed, o, projectsCodeFilesHistoryDBTypes, true, projectsCodeFilesHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsCodeFilesHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProjectsCodeFilesHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProjectsCodeFilesHistoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsCodeFilesHistory{}
	if err = randomize.Struct(seed, o, projectsCodeFilesHistoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ProjectsCodeFilesHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(projectsCodeFilesHistoryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ProjectsCodeFilesHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProjectsCodeFilesHistoryToOneProjectsHistoryUsingRevision(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ProjectsCodeFilesHistory
	var foreign ProjectsHistory

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, projectsCodeFilesHistoryDBTypes, false, projectsCodeFilesHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsCodeFilesHistory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, projectsHistoryDBTypes, false, projectsHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsHistory struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.RevisionID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Revision().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ProjectsCodeFilesHistorySlice{&local}
	if err = local.L.LoadRevision(ctx, tx, false, (*[]*ProjectsCodeFilesHistory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Revision == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Revision = nil
	if err = local.L.LoadRevision(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Revision == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testProjectsCodeFilesHistoryToOneSetOpProjectsHistoryUsingRevision(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProjectsCodeFilesHistory
	var b, c ProjectsHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, projectsCodeFilesHistoryDBTypes, false, strmangle.SetComplement(projectsCodeFilesHistoryPrimaryKeyColumns, projectsCodeFilesHistoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, projectsHistoryDBTypes, false, strmangle.SetComplement(projectsHistoryPrimaryKeyColumns, projectsHistoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, projectsHistoryDBTypes, false, strmangle.SetComplement(projectsHistoryPrimaryKeyColumns, projectsHistoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ProjectsHistory{&b, &c} {
		err = a.SetRevision(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Revision != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RevisionProjectsCodeFilesHistories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RevisionID != x.ID {
			t.Error("foreign key was wrong value", a.RevisionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RevisionID))
		reflect.Indirect(reflect.ValueOf(&a.RevisionID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.RevisionID != x.ID {
			t.Error("foreign key was wrong value", a.RevisionID, x.ID)
		}
	}
}

func testProjectsCodeFilesHistoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsCodeFilesHistory{}
	if err = randomize.Struct(seed, o, projectsCodeFilesHistoryDBTypes, true, projectsCodeFilesHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsCodeFilesHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProjectsCodeFilesHistoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsCodeFilesHistory{}
	if err = randomize.Struct(seed, o, projectsCodeFilesHistoryDBTypes, true, projectsCodeFilesHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsCodeFilesHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProjectsCodeFilesHistorySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProjectsCodeFilesHistoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsCodeFilesHistory{}
	if err = randomize.Struct(seed, o, projectsCodeFilesHistoryDBTypes, true, projectsCodeFilesHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsCodeFilesHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProjectsCodeFilesHistories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	projectsCodeFilesHistoryDBTypes = map[string]string{`ID`: `integer`, `Name`: `character varying`, `Content`: `character varying`, `RevisionID`: `integer`}
	_                               = bytes.MinRead
)

func testProjectsCodeFilesHistoriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(projectsCodeFilesHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(projectsCodeFilesHistoryAllColumns) == len(projectsCodeFilesHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsCodeFilesHistory{}
	if err = randomize.Struct(seed, o, projectsCodeFilesHistoryDBTypes, true, projectsCodeFilesHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsCodeFilesHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProjectsCodeFilesHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, projectsCodeFilesHistoryDBTypes, true, projectsCodeFilesHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProjectsCodeFilesHistory struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testProjectsCodeFilesHistoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(projectsCodeFilesHistoryAllColumns) == len(projectsCodeFilesHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsCodeFilesHistory{}
	if err = randomize.Struct(seed, o, projectsCodeFilesHistoryDBTypes, true, projectsCodeFilesHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsCodeFilesHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProjectsCodeFilesHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, projectsCodeFilesHistoryDBTypes, true, projectsCodeFilesHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProjectsCodeFilesHistory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(projectsCodeFilesHistoryAllColumns, projectsCodeFilesHistoryPrimaryKeyColumns) {
		fields = projectsCodeFilesHistoryAllColumns
	} else {
		fields = strmangle.SetComplement(
			projectsCodeFilesHistoryAllColumns,
			projectsCodeFilesHistoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ProjectsCodeFilesHistorySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testProjectsCodeFilesHistoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(projectsCodeFilesHistoryAllColumns) == len(projectsCodeFilesHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ProjectsCodeFilesHistory{}
	if err = randomize.Struct(seed, &o, projectsCodeFilesHistoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ProjectsCodeFilesHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProjectsCodeFilesHistory: %s", err)
	}

	count, err := ProjectsCodeFilesHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, projectsCodeFilesHistoryDBTypes, false, projectsCodeFilesHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProjectsCodeFilesHistory struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProjectsCodeFilesHistory: %s", err)
	}

	count, err = ProjectsCodeFilesHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
